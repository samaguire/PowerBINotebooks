#!markdown

# Microsoft documentation

[Power BI Cmdlets reference | Microsoft Docs](https://docs.microsoft.com/en-us/powershell/power-bi/overview?view=powerbi-ps)

[Analysis Services developer documentation | Microsoft Docs](https://docs.microsoft.com/en-us/analysis-services/analysis-services-developer-documentation?view=asallproducts-allversions)

[.NET API browser | Microsoft Docs](https://docs.microsoft.com/en-us/dotnet/api/?view=analysisservices-dotnet)

[SandDance | Home](https://microsoft.github.io/SandDance/)

#!markdown

# Connect to Power BI Desktop

#!markdown

Get Power BI Desktop instances

#!pwsh

$processes = Get-Process -Name "PBIDesktop" -ErrorAction SilentlyContinue
$collection = [System.Collections.Generic.List[object]]::new()

if (-not $processes) {
    $collection.Add([PSCustomObject]@{'Port' = $null; 'Instance Name' = $null})
}
else {
    foreach ($process in $processes) {
        $mainWindowTitle = $process.MainWindowTitle
        $remotePort = (Get-NetTCPConnection -OwningProcess $Process.Id).Where({$_.RemotePort -ne 0})[0].RemotePort
        $collection.Add([PSCustomObject]@{'Port'="$remotePort"; 'Instance Name'=$mainWindowTitle})
    }
}

$collection

#!markdown

Generate connection string from ***user input***

#!csharp

string portNumber = await GetInputAsync("Enter port number");

string connectionString = $"Provider=MSOLAP;Data Source=localhost:{portNumber.Trim()};";

connectionString

#!markdown

# Connect to Power BI Service

#!markdown

Install/Update PowerShell Power BI Cmdlets

#!pwsh

$localModule = Get-Module -Name MicrosoftPowerBIMgmt -ListAvailable -ErrorAction SilentlyContinue
$remoteModule = Find-Module -Name MicrosoftPowerBIMgmt -Repository PSGallery

if ($remoteModule.Version -ne [string]($localModule.Version | Measure-Object -Maximum).Maximum) {
    Install-Module -Name MicrosoftPowerBIMgmt -Repository PSGallery -Scope CurrentUser -SkipPublisherCheck -Force
}

(Get-Module -Name MicrosoftPowerBIMgmt -ListAvailable)[0]

#!markdown

Get Power BI Service access token

#!pwsh

Connect-PowerBIServiceAccount

$accessToken = (Get-PowerBIAccessToken -AsString).Split("Bearer ")[1]
# $connectionString = "Provider=MSOLAP;Data Source=powerbi://api.powerbi.com/v1.0/myorg/Centralised Datasets [Development];initial catalog=Calendar Tables;"
# $connectionString = $connectionString + "Password=$accessToken;"

#!markdown

Generate connection string from ***user input***

#!csharp

#!share --from pwsh accessToken

string workspaceName = await GetInputAsync("Enter workspace name");
string datasetName = await GetInputAsync("Enter dataset name");

if (workspaceName.Trim().ToLower() == "my workspace") { workspaceName = ""; } else { workspaceName = "/" + workspaceName; }
string connectionString = $"Provider=MSOLAP;Data Source=powerbi://api.powerbi.com/v1.0/myorg{workspaceName.Trim()};initial catalog={datasetName.Trim()};Password={accessToken};";

connectionString

#!markdown

# Query Power BI Dataset

#!markdown

Download (if required) and load assemblies into the environment

#!csharp

#r "nuget: Microsoft.AnalysisServices.AdomdClient.NetCore.retail.amd64, 19.52.2.2"

#!markdown

Add namespaces into the environment

#!csharp

using Microsoft.AnalysisServices.AdomdClient;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;

#!markdown

Define DAX query to be executed

-- Thank you Darren Gosbell! üòã (https://daxstudio.org/)

#!html

#!value --name queryString

/* START QUERY BUILDER */
EVALUATE
SUMMARIZECOLUMNS(
    Dates[YearNumber],
    Dates[MonthNumber],
    Categories[CategoryName],
    'Territories & Regions'[RegionDescription],
    KEEPFILTERS( FILTER( ALL( Dates[Year Offset] ), Dates[Year Offset] >= @YearOffset )),
    "Sales", [Sales]
)
ORDER BY 
    Dates[YearNumber] ASC,
    Dates[MonthNumber] ASC,
    Categories[CategoryName] ASC,
    'Territories & Regions'[RegionDescription] ASC
/* END QUERY BUILDER */

#!markdown

Execute DAX query against Power BI Dataset

-- Thank you SQLBI! üòÅ (https://www.sqlbi.com/articles/execute-dax-queries-through-ole-db-and-adomd-net/)

#!csharp

#!share --from value queryString

string dtString = " ";
string columnDelimiter = ", ";

using (AdomdConnection conn = new AdomdConnection())
{
    conn.ConnectionString = connectionString;
    conn.Open();
    using(AdomdCommand cmd = new AdomdCommand())
    {
        cmd.CommandText = queryString;
        cmd.Parameters.Add("YearOffset", -2);
        cmd.Connection = conn;
        using(DataTable dt = new DataTable())
        {
            using(AdomdDataAdapter da = new AdomdDataAdapter(cmd))
            {
                // da.FillSchema(dt, SchemaType.Source); // In case want to manipulate the schema before data load
                da.Fill(dt);
                string dtStringHeaders = string.Join(columnDelimiter, dt.Columns.OfType<DataColumn>().Select(x => x.ColumnName));
                // string dtStringHeaders = string.Join(columnDelimiter, dt.Columns.OfType<DataColumn>().Select(x => Regex.Match(x.ColumnName, @"(?<=\[).+?(?=\])"))); // This version removes full qualification of DAX column names
                string dtStringRows = string.Join(Environment.NewLine, dt.Rows.OfType<DataRow>().Select(x => string.Join(columnDelimiter, x.ItemArray)));
                dtString = dtStringHeaders + Environment.NewLine + dtStringRows;
            }
        }
    }
}

dtString

#!markdown

# Explore data in SandDance

#!markdown

Download (if required) and load assemblies into the environment

#!fsharp

#r "nuget: SandDance.InteractiveExtension, 1.0.73"
#r "nuget: DataView.InteractiveExtension, 1.0.73"
#r "nuget: Microsoft.Data.Analysis, 0.20.0"
#r "nuget: Microsoft.ML, 2.0.0"

#!markdown

Add namespaces into the environment

#!fsharp

open Microsoft.Data.Analysis
open System.Collections.Generic
open Microsoft.ML
open SandDance.InteractiveExtension

#!markdown

Load query results to a data frame

#!fsharp

#!share --from csharp dtString

let df = DataFrame.LoadCsvFromString(dtString)
df

#!markdown

View data frame with SandDance

#!fsharp

SandDanceDataExplorer(df.ToTabularDataResource())
