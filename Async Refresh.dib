#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Microsoft documentation

[Power BI Cmdlets reference | Microsoft Docs](https://docs.microsoft.com/en-us/powershell/power-bi/overview?view=powerbi-ps)

[Power BI REST APIs for embedded analytics and automation - Power BI REST API | Microsoft Docs](https://docs.microsoft.com/en-us/rest/api/power-bi/)

[Enhanced refresh with Power BI REST API - Power BI | Microsoft Docs](https://docs.microsoft.com/en-us/power-bi/connect-data/asynchronous-refresh)

#!markdown

# Environment

#!markdown

## Get PowerShell Modules

#!markdown

Installs or updates the the PowerShell Power BI Cmdlets.

#!pwsh

$localModule = Get-Module -Name MicrosoftPowerBIMgmt -ListAvailable -ErrorAction SilentlyContinue
$remoteModule = Find-Module -Name MicrosoftPowerBIMgmt -Repository PSGallery

if ($remoteModule.Version -ne ($localModule.Version)[0]) {
    Install-Module -Name MicrosoftPowerBIMgmt -Repository PSGallery -Scope CurrentUser -SkipPublisherCheck -Force
}

(Get-Module -Name MicrosoftPowerBIMgmt -ListAvailable)[0]

#!markdown

## Set target

#!markdown

Set the workspace and dataset name for the dataset to be refreshed. This also works with your personal "My workspace".

#!pwsh

$workspaceName = "My workspace"
$datasetName = "My dataset"

#!markdown

# Connect

#!markdown

Connects to the service and gets the GUID for the workspace (if not "My workspace") and the dataset.

#!pwsh

Connect-PowerBIServiceAccount

if ($workspaceName.ToLower() -eq "My workspace".ToLower()) {
    $datasetId = (Get-PowerBIDataset -Scope Organization -Name $datasetName)[0].Id
} else {
    $groupId = (Get-PowerBIWorkspace -Scope Organization -Name $workspaceName)[0].Id
    $groupUrlPart = "groups/$groupId/"
    $datasetId = (Get-PowerBIDataset -Scope Organization -Name $datasetName -WorkspaceId $groupId)[0].Id
}

[System.Collections.Generic.List[object]]@(
    [pscustomobject]@{Object = "Workspace"; Id = $groupId; Name = $workspaceName}
    [pscustomobject]@{Object = "Dataset"; Id = $datasetId; Name = $datasetName}
)

#!markdown

# Parameters

#!markdown

Set the refresh options by using a pre-defined collection or by setting custom values. Refer to MS documentation regarding allowed parameter values.

#!markdown

# Clear data

#!markdown

Clears all data in the database.

#!pwsh

$type = "clearValues"
$commitMode = "transactional"
$maxParallelism = $null
$retryCount = $null
$applyRefreshPolicy = "false"
$effectiveDate = $null
$objects = $null

#!markdown

## Apply refresh policy

#!markdown

Applies incremental refresh policy; updating partition structure and getting data for new partitions.

#!pwsh

$type = "automatic"
$commitMode = "transactional"
$maxParallelism = $null
$retryCount = $null
$applyRefreshPolicy = "true"
$effectiveDate = (Get-Date -Format yyyy-MM-ddTHH:mm:ss.ffffffZ).ToString() # current local date time as if it was timezone UTC+0, which is the timezone used by Power BI Service
$objects = $null

#!markdown

## Full refresh

#!markdown

Refreshes the entire database, including historical partitions.

#!pwsh

$type = "full"
$commitMode = "partialBatch"
$maxParallelism = $null
$retryCount = $null
$applyRefreshPolicy = "false"
$effectiveDate = $null
$objects = $null

#!markdown

## Custom

#!markdown

Specify custom refresh parameters and utilise advanced features.

#!pwsh

$currentDateTime = (Get-Date -Format yyyy-MM-ddTHH:mm:ss.ffffffZ).ToString() # current local date time as if it was timezone UTC+0, which is the timezone used by Power BI Service

$type = "automatic"                 # full, clearValues, calculate, dataOnly, [automatic], defragment
$commitMode = "transactional"       # [transactional], partialBatch
$maxParallelism = $null             # [10]
$retryCount = $null                 # [0]
$applyRefreshPolicy = "false"       # [true], false

$effectiveDate = $currentDateTime   # uses current server date time (UTC+0) unless specified

$objects = @"
{
  "refresh": {
    "type": "automatic",
    "objects": [
      {
        "database": "My dataset",
        "table": "Table1",
        "partition": "Table1-0d2da98d-6fbf-4b2c-a97c-14e932a23fb6"
      }
    ]
  }
}
"@                                  # Tabular Editor scripted TMSL; note that only table and partition objects will be used

#!markdown

# Create payload

#!markdown

Creates the paylod used in the API call to the service.

#!pwsh

$json =  [pscustomobject]@{}

if ($type) {
    $json | Add-Member -NotePropertyMembers @{type = $type}
}
if ($commitMode) {
    $json | Add-Member -NotePropertyMembers @{commitMode = $commitMode}
}
if ($maxParallelism) {
    $json | Add-Member -NotePropertyMembers @{maxParallelism = $maxParallelism}
}
if ($retryCount) {
    $json | Add-Member -NotePropertyMembers @{retryCount = $retryCount}
}
if ($applyRefreshPolicy) {
    $json | Add-Member -NotePropertyMembers @{applyRefreshPolicy = $applyRefreshPolicy}
}
if ($effectiveDate) {
    $json | Add-Member -NotePropertyMembers @{effectiveDate = $effectiveDate}
}
if ($objects) {
    $json | Add-Member -NotePropertyMembers @{objects = @((ConvertFrom-Json $objects).refresh.objects | Select-Object * -ExcludeProperty "database")}
}

$bodyJson = ConvertTo-Json $json
$bodyJson

#!markdown

# Execute and monitor

#!markdown

Refresh related API calls.

#!markdown

## Initiate

#!markdown

Trigger a refresh.

#!pwsh

Invoke-PowerBIRestMethod -Url "$($groupUrlPart)datasets/$datasetId/refreshes" -Method Post -Body $bodyJson -ContentType "application/json"
$requestId = (Invoke-PowerBIRestMethod -Url "$($groupUrlPart)datasets/$datasetId/refreshes?`$top=1" -Method Get | ConvertFrom-Json).value.requestId
[pscustomobject]@{'Request ID' = $requestId}

#!markdown

## Status

#!markdown

Get the refresh status for the last triggered refresh.

#!pwsh

# $requestId = (Invoke-PowerBIRestMethod -Url "$($groupUrlPart)datasets/$datasetId/refreshes?`$top=1" -Method Get | ConvertFrom-Json).value.requestId
$body = Invoke-PowerBIRestMethod -Url "$($groupUrlPart)datasets/$datasetId/refreshes/$requestId" -Method Get | ConvertFrom-Json
$body | Select-Object * -ExcludeProperty "objects"
$body.objects | Where-Object -Property status -NE "Completed"

#!markdown

## Cancel

#!markdown

Cancel the last triggered refresh.

#!pwsh

# $requestId = (Invoke-PowerBIRestMethod -Url "$($groupUrlPart)datasets/$datasetId/refreshes?`$top=1" -Method Get | ConvertFrom-Json).value.requestId
Invoke-PowerBIRestMethod -Url "$($groupUrlPart)datasets/$datasetId/refreshes/$requestId" -Method Delete

#!markdown

# Other

#!markdown

Other useful API calls.

#!markdown

## Get recent refresh details

#!markdown

Get the summary details for the last 3 refreshes.

#!pwsh

(Invoke-PowerBIRestMethod -Url "$($groupUrlPart)datasets/$datasetId/refreshes?`$top=3" -Method Get | ConvertFrom-Json).value

#!markdown

## View error details

#!markdown

View error details for the last run Power BI Cmdlet.

#!pwsh

Resolve-PowerBIError -Last
